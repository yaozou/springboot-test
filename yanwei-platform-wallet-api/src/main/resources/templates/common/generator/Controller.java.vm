package ${package}.controller;


import io.swagger.annotations.ApiOperation;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.yanwei.platform.common.constant.Constants;
import com.yanwei.platform.common.annotation.Log;
import com.yanwei.platform.common.enums.CodeEnum;
import com.yanwei.platform.common.page.Pagination;
import com.yanwei.platform.member.domain.ApiOut;

import ${package}.domain.${className}Vo;
import ${package}.model.${className}Entity;
import ${package}.service.I${className}Service;


/**
 * ${comments}
 * @author ${author}
 * @version $Id: ${className}Controller.java, v 0.1 ${datetime} luojianhong Exp $
 */
@RestController
@RequestMapping("/${pathName}/${classname}")
public class ${className}Controller {

    @Autowired
	private I${className}Service ${classname}Service;

    @GetMapping(path="/{${pk.attrname}}",produces = MediaType.APPLICATION_JSON_UTF8_VALUE, headers = Constants.API_VER)
    @ApiOperation(value = "获取${comments}信息接口", notes = "获取${comments}信息接口")
    @Log("获取${comments}接口")
    public ApiOut<${className}Entity> findById(@PathVariable ${pk.attrType} ${pk.attrname}) {
         ${className}Entity bean = ${classname}Service.findById(${pk.attrname});
        return ApiOut.success(bean);
    }

    @ApiOperation(value = "${comments}新增接口", notes = "${comments}新增接口")
    @Log("${comments}新增接口")
    @PostMapping(produces = MediaType.APPLICATION_JSON_UTF8_VALUE, headers = Constants.API_VER)
    public ApiOut<String> create(@RequestBody ${className}Entity bean) {
        ${classname}Service.save(bean);
        return ApiOut.success();
    }

    @PutMapping(path = "/{${pk.attrname}}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE, headers = Constants.API_VER)
    @ApiOperation(value = "${comments}修改接口", notes = "${comments}修改接口")
    @Log("${comments}修改接口")
    public ApiOut<String> update(@PathVariable ${pk.attrType} ${pk.attrname},
                                 @RequestBody ${className}Entity bean) {
        
        ${className}Entity oldBean=${classname}Service.findById(${pk.attrname});
        if (oldBean == null)
            return ApiOut.failure(CodeEnum.NON_EXIST_ERROR.getCode(),
                CodeEnum.NON_EXIST_ERROR.getMsg());
        bean.setId(id);
        ${classname}Service.update(bean);
        return ApiOut.success();
    }

    @DeleteMapping(path = "/{${pk.attrname}}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE, headers = Constants.API_VER)
    @ApiOperation(value = "${comments}删除接口", notes = "${comments}删除接口")
    @Log("${comments}删除接口")
    public ApiOut<String> delete(@PathVariable ${pk.attrType} ${pk.attrname}) {
        ${className}Entity bean=${classname}Service.findById(${pk.attrname});
        if (bean == null)
            return ApiOut.failure(CodeEnum.NON_EXIST_ERROR.getCode(),CodeEnum.NON_EXIST_ERROR.getMsg());
        ${classname}Service.deleteById(id);
        return ApiOut.success();
    }

   
    @ApiOperation(value = "${comments}分页查询接口", notes = "${comments}分页查询接口")
    @PostMapping(path = "/query", produces = MediaType.APPLICATION_JSON_UTF8_VALUE, headers = Constants.API_VER)
    @Log("${comments}分页查询接口")
    public ApiOut<Pagination<${className}Entity>> getPage(@RequestBody ${className}Vo vo) {
        Pagination<${className}Entity> pagination = ${classname}Service.getPage(toMode(vo),vo.getPageIndex(),
            vo.getPageSize());
        return ApiOut.success(pagination);
    }
  
  
    private ${className}Entity  toMode(${className}Vo vo){
    	${className}Entity bean=new ${className}Entity();
    	BeanUtils.copyProperties(vo, bean);
    	return bean;
    }
    
    private  ${className}Vo  toVo(${className}Entity bean){
    	${className}Vo vo=new ${className}Vo();
    	BeanUtils.copyProperties(bean, vo);
    	return vo;
    }
    

}
